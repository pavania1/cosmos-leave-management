// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/lms/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetLeaveRequest struct {
}

func (m *GetLeaveRequest) Reset()         { *m = GetLeaveRequest{} }
func (m *GetLeaveRequest) String() string { return proto.CompactTextString(m) }
func (*GetLeaveRequest) ProtoMessage()    {}
func (*GetLeaveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{0}
}
func (m *GetLeaveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLeaveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLeaveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLeaveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaveRequest.Merge(m, src)
}
func (m *GetLeaveRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLeaveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaveRequest proto.InternalMessageInfo

// }
type GetAdminRequest struct {
}

func (m *GetAdminRequest) Reset()         { *m = GetAdminRequest{} }
func (m *GetAdminRequest) String() string { return proto.CompactTextString(m) }
func (*GetAdminRequest) ProtoMessage()    {}
func (*GetAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{1}
}
func (m *GetAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAdminRequest.Merge(m, src)
}
func (m *GetAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAdminRequest proto.InternalMessageInfo

type GetAdminResponse struct {
	Admin []*Admin `protobuf:"bytes,1,rep,name=admin,proto3" json:"admin,omitempty"`
}

func (m *GetAdminResponse) Reset()         { *m = GetAdminResponse{} }
func (m *GetAdminResponse) String() string { return proto.CompactTextString(m) }
func (*GetAdminResponse) ProtoMessage()    {}
func (*GetAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{2}
}
func (m *GetAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAdminResponse.Merge(m, src)
}
func (m *GetAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAdminResponse proto.InternalMessageInfo

func (m *GetAdminResponse) GetAdmin() []*Admin {
	if m != nil {
		return m.Admin
	}
	return nil
}

type GetstudentsRequest struct {
}

func (m *GetstudentsRequest) Reset()         { *m = GetstudentsRequest{} }
func (m *GetstudentsRequest) String() string { return proto.CompactTextString(m) }
func (*GetstudentsRequest) ProtoMessage()    {}
func (*GetstudentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{3}
}
func (m *GetstudentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetstudentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetstudentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetstudentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetstudentsRequest.Merge(m, src)
}
func (m *GetstudentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetstudentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetstudentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetstudentsRequest proto.InternalMessageInfo

type GetstudentsResponse struct {
	Students []*Student `protobuf:"bytes,1,rep,name=students,proto3" json:"students,omitempty"`
}

func (m *GetstudentsResponse) Reset()         { *m = GetstudentsResponse{} }
func (m *GetstudentsResponse) String() string { return proto.CompactTextString(m) }
func (*GetstudentsResponse) ProtoMessage()    {}
func (*GetstudentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{4}
}
func (m *GetstudentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetstudentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetstudentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetstudentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetstudentsResponse.Merge(m, src)
}
func (m *GetstudentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetstudentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetstudentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetstudentsResponse proto.InternalMessageInfo

func (m *GetstudentsResponse) GetStudents() []*Student {
	if m != nil {
		return m.Students
	}
	return nil
}

type GetLeaveReq struct {
}

func (m *GetLeaveReq) Reset()         { *m = GetLeaveReq{} }
func (m *GetLeaveReq) String() string { return proto.CompactTextString(m) }
func (*GetLeaveReq) ProtoMessage()    {}
func (*GetLeaveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{5}
}
func (m *GetLeaveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLeaveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLeaveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLeaveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaveReq.Merge(m, src)
}
func (m *GetLeaveReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLeaveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaveReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaveReq proto.InternalMessageInfo

type GetLeaveRequestResponse struct {
	Leaverequest []*GetLeaveRequest `protobuf:"bytes,1,rep,name=leaverequest,proto3" json:"leaverequest,omitempty"`
}

func (m *GetLeaveRequestResponse) Reset()         { *m = GetLeaveRequestResponse{} }
func (m *GetLeaveRequestResponse) String() string { return proto.CompactTextString(m) }
func (*GetLeaveRequestResponse) ProtoMessage()    {}
func (*GetLeaveRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{6}
}
func (m *GetLeaveRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLeaveRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLeaveRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLeaveRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaveRequestResponse.Merge(m, src)
}
func (m *GetLeaveRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLeaveRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaveRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaveRequestResponse proto.InternalMessageInfo

func (m *GetLeaveRequestResponse) GetLeaverequest() []*GetLeaveRequest {
	if m != nil {
		return m.Leaverequest
	}
	return nil
}

type GetLeaveApproveRequest struct {
}

func (m *GetLeaveApproveRequest) Reset()         { *m = GetLeaveApproveRequest{} }
func (m *GetLeaveApproveRequest) String() string { return proto.CompactTextString(m) }
func (*GetLeaveApproveRequest) ProtoMessage()    {}
func (*GetLeaveApproveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{7}
}
func (m *GetLeaveApproveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLeaveApproveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLeaveApproveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLeaveApproveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaveApproveRequest.Merge(m, src)
}
func (m *GetLeaveApproveRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLeaveApproveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaveApproveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaveApproveRequest proto.InternalMessageInfo

type GetLeaveApproveResponse struct {
	Getleaverequest []*GetLeaveRequest `protobuf:"bytes,1,rep,name=Getleaverequest,proto3" json:"Getleaverequest,omitempty"`
}

func (m *GetLeaveApproveResponse) Reset()         { *m = GetLeaveApproveResponse{} }
func (m *GetLeaveApproveResponse) String() string { return proto.CompactTextString(m) }
func (*GetLeaveApproveResponse) ProtoMessage()    {}
func (*GetLeaveApproveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{8}
}
func (m *GetLeaveApproveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLeaveApproveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLeaveApproveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLeaveApproveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaveApproveResponse.Merge(m, src)
}
func (m *GetLeaveApproveResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetLeaveApproveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaveApproveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaveApproveResponse proto.InternalMessageInfo

func (m *GetLeaveApproveResponse) GetGetleaverequest() []*GetLeaveRequest {
	if m != nil {
		return m.Getleaverequest
	}
	return nil
}

type GetRegisterAdminRequest struct {
}

func (m *GetRegisterAdminRequest) Reset()         { *m = GetRegisterAdminRequest{} }
func (m *GetRegisterAdminRequest) String() string { return proto.CompactTextString(m) }
func (*GetRegisterAdminRequest) ProtoMessage()    {}
func (*GetRegisterAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{9}
}
func (m *GetRegisterAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegisterAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegisterAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegisterAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegisterAdminRequest.Merge(m, src)
}
func (m *GetRegisterAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetRegisterAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegisterAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegisterAdminRequest proto.InternalMessageInfo

type GetRegisterAdminResponse struct {
	GetAdminrequest []*GetAdminRequest `protobuf:"bytes,1,rep,name=GetAdminrequest,proto3" json:"GetAdminrequest,omitempty"`
}

func (m *GetRegisterAdminResponse) Reset()         { *m = GetRegisterAdminResponse{} }
func (m *GetRegisterAdminResponse) String() string { return proto.CompactTextString(m) }
func (*GetRegisterAdminResponse) ProtoMessage()    {}
func (*GetRegisterAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aaac713669af5ad, []int{10}
}
func (m *GetRegisterAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRegisterAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRegisterAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRegisterAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRegisterAdminResponse.Merge(m, src)
}
func (m *GetRegisterAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRegisterAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRegisterAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRegisterAdminResponse proto.InternalMessageInfo

func (m *GetRegisterAdminResponse) GetGetAdminrequest() []*GetAdminRequest {
	if m != nil {
		return m.GetAdminrequest
	}
	return nil
}

func init() {
	proto.RegisterType((*GetLeaveRequest)(nil), "lms.v1beta1.GetLeaveRequest")
	proto.RegisterType((*GetAdminRequest)(nil), "lms.v1beta1.GetAdminRequest")
	proto.RegisterType((*GetAdminResponse)(nil), "lms.v1beta1.GetAdminResponse")
	proto.RegisterType((*GetstudentsRequest)(nil), "lms.v1beta1.GetstudentsRequest")
	proto.RegisterType((*GetstudentsResponse)(nil), "lms.v1beta1.GetstudentsResponse")
	proto.RegisterType((*GetLeaveReq)(nil), "lms.v1beta1.GetLeaveReq")
	proto.RegisterType((*GetLeaveRequestResponse)(nil), "lms.v1beta1.GetLeaveRequestResponse")
	proto.RegisterType((*GetLeaveApproveRequest)(nil), "lms.v1beta1.GetLeaveApproveRequest")
	proto.RegisterType((*GetLeaveApproveResponse)(nil), "lms.v1beta1.GetLeaveApproveResponse")
	proto.RegisterType((*GetRegisterAdminRequest)(nil), "lms.v1beta1.GetRegisterAdminRequest")
	proto.RegisterType((*GetRegisterAdminResponse)(nil), "lms.v1beta1.GetRegisterAdminResponse")
}

func init() { proto.RegisterFile("cosmos/lms/v1beta1/query.proto", fileDescriptor_4aaac713669af5ad) }

var fileDescriptor_4aaac713669af5ad = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xdb, 0xf7, 0x0d, 0x86, 0x4c, 0xfd, 0xbb, 0x12, 0xc5, 0xaa, 0x95, 0xac, 0x9a, 0x70,
	0x2a, 0x82, 0x57, 0x0f, 0xe2, 0xc1, 0xc6, 0xc4, 0x83, 0xd4, 0x9b, 0xc6, 0x43, 0x81, 0x89, 0x21,
	0xa1, 0xb4, 0x74, 0x17, 0x02, 0xdf, 0xc2, 0x8f, 0xe5, 0x91, 0x93, 0xf1, 0x68, 0xe0, 0x8b, 0x98,
	0xb6, 0xdb, 0x96, 0x56, 0xc0, 0x78, 0x7d, 0xe6, 0x99, 0xdf, 0xb3, 0x3b, 0x3b, 0x0b, 0x5a, 0xcb,
	0x61, 0xb6, 0xc3, 0x2a, 0x5d, 0x9b, 0x55, 0x86, 0xd5, 0x26, 0x72, 0xab, 0x5a, 0xe9, 0x0f, 0xd0,
	0x1b, 0xeb, 0xae, 0xe7, 0x70, 0x87, 0x28, 0x5d, 0x9b, 0xe9, 0xa2, 0xa0, 0x1e, 0x2e, 0x30, 0xf3,
	0x51, 0xe8, 0xa4, 0x3b, 0xb0, 0x65, 0x20, 0xbf, 0x47, 0x6b, 0x88, 0x26, 0xf6, 0x07, 0xc8, 0xb8,
	0x90, 0xea, 0x6d, 0xbb, 0xd3, 0x8b, 0xa4, 0x2b, 0xd8, 0x4e, 0x24, 0xe6, 0x3a, 0x3d, 0x86, 0xa4,
	0x0c, 0x39, 0xcb, 0x17, 0x8a, 0x72, 0xe9, 0x7f, 0x59, 0xa9, 0x11, 0x7d, 0x2e, 0x53, 0x0f, 0xad,
	0xa1, 0x81, 0x16, 0x80, 0x18, 0xc8, 0x19, 0x1f, 0xb4, 0xb1, 0xc7, 0x59, 0xc4, 0x34, 0x60, 0x37,
	0xa5, 0x0a, 0xec, 0x05, 0xe4, 0x23, 0x4d, 0x90, 0x0b, 0x29, 0xf2, 0x63, 0x58, 0x34, 0x63, 0x17,
	0xdd, 0x00, 0x65, 0xee, 0x0a, 0xf4, 0x19, 0xf6, 0x33, 0x37, 0x8a, 0xd9, 0xd7, 0xb0, 0xde, 0xf5,
	0x75, 0x2f, 0xd4, 0x05, 0xff, 0x28, 0xc5, 0xcf, 0xf6, 0xa6, 0x3a, 0x68, 0x11, 0xf6, 0x22, 0x43,
	0xdd, 0x75, 0x3d, 0x27, 0x99, 0x9a, 0x95, 0xc4, 0xc6, 0x15, 0x11, 0x7b, 0x1b, 0x0c, 0xf4, 0xcf,
	0xc9, 0xd9, 0x26, 0x7a, 0x10, 0x44, 0x98, 0xf8, 0xda, 0x61, 0x1c, 0xbd, 0xd4, 0x03, 0x35, 0xa1,
	0xf8, 0xb3, 0x94, 0x8a, 0x0f, 0xb4, 0x5f, 0xe2, 0xe7, 0x91, 0x66, 0xb6, 0xa9, 0xf6, 0xf1, 0x0f,
	0x72, 0x0d, 0x7f, 0xc9, 0xc8, 0x1d, 0xe4, 0xa3, 0x22, 0x59, 0x09, 0x51, 0x8f, 0x97, 0x54, 0xc3,
	0xa3, 0x51, 0x89, 0x34, 0x00, 0x0c, 0xe4, 0xe2, 0x51, 0xc9, 0x49, 0xd6, 0x9e, 0x59, 0x1a, 0xb5,
	0xb4, 0xdc, 0x10, 0x23, 0x1f, 0x82, 0xd3, 0x05, 0xa3, 0x24, 0x2b, 0x27, 0xac, 0x9e, 0xad, 0x9c,
	0x7f, 0x42, 0x7c, 0x81, 0x4d, 0xff, 0xe8, 0xad, 0x16, 0xba, 0x82, 0x7b, 0xba, 0xb0, 0x33, 0xbd,
	0x12, 0x4b, 0xf0, 0x99, 0xed, 0xa0, 0xd2, 0xcd, 0xf9, 0xfb, 0x54, 0x93, 0x27, 0x53, 0x4d, 0xfe,
	0x9a, 0x6a, 0xf2, 0xdb, 0x4c, 0x93, 0x26, 0x33, 0x4d, 0xfa, 0x9c, 0x69, 0xd2, 0x93, 0x32, 0x0a,
	0x7e, 0x2d, 0x1f, 0xbb, 0xc8, 0x9a, 0x6b, 0xc1, 0x8f, 0xbd, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x7f, 0xb0, 0x24, 0x9c, 0xfd, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetRegisterAdmin adds a new admin
	GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...grpc.CallOption) (*GetAdminResponse, error)
	// GetStudent adds new student
	GetStudent(ctx context.Context, in *GetstudentsRequest, opts ...grpc.CallOption) (*GetstudentsResponse, error)
	// GetLeave request a new leave
	GetLeave(ctx context.Context, in *GetLeaveRequest, opts ...grpc.CallOption) (*GetLeaveRequestResponse, error)
	// AcceptLeave accept or reject a leave
	GetAcceptLeave(ctx context.Context, in *GetLeaveApproveRequest, opts ...grpc.CallOption) (*GetLeaveApproveResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...grpc.CallOption) (*GetAdminResponse, error) {
	out := new(GetAdminResponse)
	err := c.cc.Invoke(ctx, "/lms.v1beta1.Query/GetAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStudent(ctx context.Context, in *GetstudentsRequest, opts ...grpc.CallOption) (*GetstudentsResponse, error) {
	out := new(GetstudentsResponse)
	err := c.cc.Invoke(ctx, "/lms.v1beta1.Query/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLeave(ctx context.Context, in *GetLeaveRequest, opts ...grpc.CallOption) (*GetLeaveRequestResponse, error) {
	out := new(GetLeaveRequestResponse)
	err := c.cc.Invoke(ctx, "/lms.v1beta1.Query/GetLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAcceptLeave(ctx context.Context, in *GetLeaveApproveRequest, opts ...grpc.CallOption) (*GetLeaveApproveResponse, error) {
	out := new(GetLeaveApproveResponse)
	err := c.cc.Invoke(ctx, "/lms.v1beta1.Query/GetAcceptLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetRegisterAdmin adds a new admin
	GetAdmin(context.Context, *GetAdminRequest) (*GetAdminResponse, error)
	// GetStudent adds new student
	GetStudent(context.Context, *GetstudentsRequest) (*GetstudentsResponse, error)
	// GetLeave request a new leave
	GetLeave(context.Context, *GetLeaveRequest) (*GetLeaveRequestResponse, error)
	// AcceptLeave accept or reject a leave
	GetAcceptLeave(context.Context, *GetLeaveApproveRequest) (*GetLeaveApproveResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetAdmin(ctx context.Context, req *GetAdminRequest) (*GetAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmin not implemented")
}
func (*UnimplementedQueryServer) GetStudent(ctx context.Context, req *GetstudentsRequest) (*GetstudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (*UnimplementedQueryServer) GetLeave(ctx context.Context, req *GetLeaveRequest) (*GetLeaveRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeave not implemented")
}
func (*UnimplementedQueryServer) GetAcceptLeave(ctx context.Context, req *GetLeaveApproveRequest) (*GetLeaveApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcceptLeave not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lms.v1beta1.Query/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAdmin(ctx, req.(*GetAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetstudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lms.v1beta1.Query/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStudent(ctx, req.(*GetstudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lms.v1beta1.Query/GetLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLeave(ctx, req.(*GetLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAcceptLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAcceptLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lms.v1beta1.Query/GetAcceptLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAcceptLeave(ctx, req.(*GetLeaveApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lms.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdmin",
			Handler:    _Query_GetAdmin_Handler,
		},
		{
			MethodName: "GetStudent",
			Handler:    _Query_GetStudent_Handler,
		},
		{
			MethodName: "GetLeave",
			Handler:    _Query_GetLeave_Handler,
		},
		{
			MethodName: "GetAcceptLeave",
			Handler:    _Query_GetAcceptLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/lms/v1beta1/query.proto",
}

func (m *GetLeaveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLeaveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLeaveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		for iNdEx := len(m.Admin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetstudentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetstudentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetstudentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetstudentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetstudentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetstudentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Students) > 0 {
		for iNdEx := len(m.Students) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Students[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLeaveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLeaveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLeaveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetLeaveRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLeaveRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLeaveRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Leaverequest) > 0 {
		for iNdEx := len(m.Leaverequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Leaverequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetLeaveApproveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLeaveApproveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLeaveApproveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetLeaveApproveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLeaveApproveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLeaveApproveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Getleaverequest) > 0 {
		for iNdEx := len(m.Getleaverequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Getleaverequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetRegisterAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegisterAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegisterAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetRegisterAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRegisterAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRegisterAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GetAdminrequest) > 0 {
		for iNdEx := len(m.GetAdminrequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GetAdminrequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetLeaveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Admin) > 0 {
		for _, e := range m.Admin {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetstudentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetstudentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Students) > 0 {
		for _, e := range m.Students {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetLeaveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetLeaveRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Leaverequest) > 0 {
		for _, e := range m.Leaverequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetLeaveApproveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetLeaveApproveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Getleaverequest) > 0 {
		for _, e := range m.Getleaverequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GetRegisterAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetRegisterAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GetAdminrequest) > 0 {
		for _, e := range m.GetAdminrequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetLeaveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLeaveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLeaveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = append(m.Admin, &Admin{})
			if err := m.Admin[len(m.Admin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetstudentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetstudentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetstudentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetstudentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetstudentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetstudentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Students", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Students = append(m.Students, &Student{})
			if err := m.Students[len(m.Students)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLeaveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLeaveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLeaveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLeaveRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLeaveRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLeaveRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaverequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leaverequest = append(m.Leaverequest, &GetLeaveRequest{})
			if err := m.Leaverequest[len(m.Leaverequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLeaveApproveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLeaveApproveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLeaveApproveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLeaveApproveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLeaveApproveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLeaveApproveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Getleaverequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Getleaverequest = append(m.Getleaverequest, &GetLeaveRequest{})
			if err := m.Getleaverequest[len(m.Getleaverequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegisterAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegisterAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegisterAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRegisterAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRegisterAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRegisterAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetAdminrequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GetAdminrequest = append(m.GetAdminrequest, &GetAdminRequest{})
			if err := m.GetAdminrequest[len(m.GetAdminrequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
